import { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

interface CSSInputChallenge {
  id: string;
  title: string;
  description: string;
  hint: string;
  inputs: { label: string; property: string }[];
  solution: { [key: string]: string };
  badge: string;
}

const challenge: CSSInputChallenge = {
  id: '1',
  title: 'Center a Div',
  description: 'Center a child div both horizontally and vertically.',
  hint: 'Use flexbox: display, justify-content, align-items, and height.',
  inputs: [
    { label: 'display', property: 'display' },
    { label: 'justify-content', property: 'justifyContent' },
    { label: 'align-items', property: 'alignItems' },
    { label: 'height', property: 'height' },
  ],
  solution: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '200px',
  },
  badge: 'ðŸ¥‡ Flexbox Mastery',
};

const CodeOn = () => {
  const [styles, setStyles] = useState<{ [key: string]: string }>({});
  const [showBadge, setShowBadge] = useState(false);

  const handleChange = (property: string, value: string) => {
    setStyles((prev) => {
      const updated = { ...prev, [property]: value };
      checkSolution(updated);
      return updated;
    });
  };

  const checkSolution = (currentStyles: { [key: string]: string }) => {
    const isCorrect = Object.entries(challenge.solution).every(
      ([key, val]) => currentStyles[key]?.trim() === val
    );
    setShowBadge(isCorrect);
  };

  const reset = () => {
    setStyles({});
    setShowBadge(false);
  };

  return (
    <div className="min-h-screen bg-[#0D1117] text-[#C9D1D9] py-10 px-4">
      <Card className="max-w-5xl mx-auto p-8 bg-[#161B22] rounded-2xl shadow-lg">
        <div className="flex flex-col md:flex-row gap-10">
          <div className="md:w-1/2">
            <h2 className="text-3xl font-bold mb-2">{challenge.title}</h2>
            <p className="mb-1">{challenge.description}</p>
            <p className="text-yellow-400 text-sm mb-6">Hint: {challenge.hint}</p>

            <div className="space-y-4">
              {challenge.inputs.map((input) => (
                <div key={input.property} className="flex gap-2 items-center">
                  <label className="w-40 font-mono">{input.label}:</label>
                  <input
                    className="flex-1 p-2 rounded bg-black text-green-400 font-mono border border-[#30363D]"
                    placeholder={`Enter ${input.label}`}
                    value={styles[input.property] || ''}
                    onChange={(e) => handleChange(input.property, e.target.value)}
                  />
                </div>
              ))}
            </div>

            <Button onClick={reset} className="mt-6 bg-red-600 hover:bg-red-700">
              Reset
            </Button>

            {showBadge && (
              <div className="mt-6 text-green-400 flex items-center gap-2">
                <span className="bg-green-700 text-white px-3 py-1 rounded-full font-semibold">
                  {challenge.badge}
                </span>
                <span className="text-xs text-gray-400">+10 XP</span>
              </div>
            )}
          </div>

          <div className="md:w-1/2">
            <h3 className="text-xl font-semibold mb-2">Live Preview</h3>
            <div
              className="bg-white w-full rounded-lg flex transition-all duration-300 items-center justify-center border border-dashed border-[#30363D]"
              style={{ ...styles, minHeight: '200px' }}
            >
              <div className="w-16 h-16 bg-blue-500 rounded" />
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default CodeOn;